
import java.io.*;

/**
 * @author Steven Dao
 * @version 1.0
 *
 * Date: 10/20/2021
 * Purpose: To attempt to simulate malware by altering game files using hex editors.
 */
public class Main {

    // keep an enumerated list of game data sets and their offset positions in decimal
    public enum gameData {
        CHARACTER_STATS (14),
        FOOD (514),
        GOLD (516),
        KEYS (518),
        GEMS (519),
        MAGIC_CARPETS (522),
        SKULL_KEYS (523),
        BLACK_BADGES (536),
        MAGIC_AXES (576);


        // each data will have an offset position corresponding to it
        public final int offset;

        /**
         * Sets the offset for the data set.
         *
         * @param newOffset the corresponding offset position of the data
         */
        gameData(int newOffset) {
            this.offset = newOffset;
        }
    }

    /**
     * Tests all other functions of the application.
     *
     * @param args the command-line arguments to the application
     */
    public static void main(String[] args) {

        // get the file name from the src folder directory
        File saveFile = new File("SAVED.GAM");

        // catch I/O exceptions
        try {
            mainMenu(saveFile);
        } catch (FileNotFoundException e) {
            System.err.println("The file could not be found; please try again.");
        }
    }

    /**
     * Displays the main menu for the application.
     *
     * @param saveFile the save file for the game to read / write from
     * @throws FileNotFoundException thrown when the file could not be found within the folder directory.
     */
    private static void mainMenu(File saveFile) throws FileNotFoundException {

        int input;
        int inputStat;
        String convertedHex;

        do {

            System.out.print(
                    "\n========================================================================" +
                    "\n                           Malicious Software" +
                    "\n========================================================================" +
                    "\n\nPlease select an option:" +
                    "\n\t1)  Change characters' stats" +
                    "\n\t2)  Change amount of food" +
                    "\n\t3)  Change amount of gold" +
                    "\n\t4)  Change amount of keys" +
                    "\n\t5)  Change amount of gems" +
                    "\n\t6)  Change amount of magic carpets" +
                    "\n\t7)  Change amount of skull keys" +
                    "\n\t8)  Change amount of black badges" +
                    "\n\t9)  Change amount of magic axes" +
                    "\n\t10) View bytes within the save file" +
                    "\n\t0)  Quit" +
                    "\n >> ");
            input = Functions.checkIntRange(0, 10);

            switch (input) {
                case 1 -> characterMenu(saveFile);
                case 2 -> {
                    // the range must fall at most between hex codes "0000" and "FFFF"
                    System.out.print("\nEnter the new food amount (integer):\n >> ");
                    inputStat = Functions.checkIntRange(0, 65535);

                    // convert the hex value to little endian
                    convertedHex = Functions.toLittleEndian(Functions.paddedToHex(inputStat, 4));

                    // replacing first offset of the food stat based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.FOOD.offset, convertedHex.substring(0, 2));
                    // replacing second offset of the food stat based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.FOOD.offset + 1, convertedHex.substring(2, 4));
                }
                case 3 -> {
                    // the range must fall at most between hex codes "00" and "FF"
                    System.out.print("\nEnter the new gold amount (integer):\n >> ");
                    inputStat = Functions.checkIntRange(0, 65535);

                    // convert the hex value to little endian
                    convertedHex = Functions.toLittleEndian(Functions.paddedToHex(inputStat, 4));

                    // replacing first offset of the gold stat based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.GOLD.offset, convertedHex.substring(0, 2));
                    // replacing second offset of the gold stat based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.GOLD.offset + 1, convertedHex.substring(2, 4));
                }
                case 4 -> {
                    // the range must fall at most between hex codes "00" and "FF"
                    System.out.print("\nEnter the new key amount (integer):\n >> ");
                    inputStat = Functions.checkIntRange(0, 255);

                    // replacing key amount based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.KEYS.offset, Integer.toHexString(inputStat));
                }
                case 5 -> {
                    // the range must fall at most between hex codes "00" and "FF"
                    System.out.print("\nEnter the new gem amount (integer):\n >> ");
                    inputStat = Functions.checkIntRange(0, 255);

                    // replacing gem amount based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.GEMS.offset, Integer.toHexString(inputStat));
                }
                case 6 -> {
                    // the range must fall at most between hex codes "00" and "FF"
                    System.out.print("\nEnter the new magic carpet amount (integer):\n >> ");
                    inputStat = Functions.checkIntRange(0, 255);

                    // replacing magic carpet amount based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.MAGIC_CARPETS.offset, Integer.toHexString(inputStat));
                }
                case 7 -> {
                    // the range must fall at most between hex codes "00" and "FF"
                    System.out.print("\nEnter the new skull key amount (integer):\n >> ");
                    inputStat = Functions.checkIntRange(0, 255);

                    // replacing skull key amount based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.SKULL_KEYS.offset, Integer.toHexString(inputStat));
                }
                case 8 -> {
                    // the range must fall at most between hex codes "00" and "FF"
                    System.out.print("\nEnter the new black badge amount (integer):\n >> ");
                    inputStat = Functions.checkIntRange(0, 255);

                    // replacing black badge amount based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.BLACK_BADGES.offset, Integer.toHexString(inputStat));
                }
                case 9 -> {
                    // the range must fall at most between hex codes "00" and "FF"
                    System.out.print("\nEnter the new magic axe amount (integer):\n >> ");
                    inputStat = Functions.checkIntRange(0, 255);

                    // replacing magic axe amount based on the data's offset
                    Functions.replaceByteAtOffset(saveFile,
                            gameData.MAGIC_AXES.offset, Integer.toHexString(inputStat));
                }
                case 10 -> Functions.printBytesAsHex(saveFile);
                default -> {
                }
            }

        } while (input != 0);
    }

    /**
     * Displays the character modification window, branched from the main menu.
     *
     * @param saveFile the save file for the game to read / write from
     */
    private static void characterMenu(File saveFile) {

        // store the user input
        int inputCharNumber;
        int inputChoice;
        int inputStat;
        String convertedHex;

        do {
            System.out.print("\nEnter the character number (1 - 16) (0 to return):\n >> ");
            inputCharNumber = Functions.checkIntRange(0, 16);

            if (inputCharNumber != 0) {
                // loop for each change of character's stats
                do {

                    System.out.print(
                            "\nPlease select an option:" +
                            "\n\t1) Change character's STR" +
                            "\n\t2) Change character's INT" +
                            "\n\t3) Change character's DEX" +
                            "\n\t4) Change character's MAG" +
                            "\n\t5) Change character's HP" +
                            "\n\t6) Change character's HPMAX" +
                            "\n\t7) Change character's EXP" +
                            "\n\t8) Change character's LVL" +
                            "\n\t0) Return" +
                            "\n >> ");
                    inputChoice = Functions.checkIntRange(0, 8);

                    switch (inputChoice) {
                        case 1 -> {
                            // the range must fall at most between hex codes "00" and "FF"
                            System.out.print("\nEnter the new STR stat (integer):\n >> ");
                            inputStat = Functions.checkIntRange(0, 255);

                            // replacing strength stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)),
                                    Integer.toHexString(inputStat));
                        }
                        case 2 -> {
                            // the range must fall at most between hex codes "00" and "FF"
                            System.out.print("\nEnter the new INT stat (integer):\n >> ");
                            inputStat = Functions.checkIntRange(0, 255);

                            // replacing intelligence stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 1,
                                    Integer.toHexString(inputStat));
                        }
                        case 3 -> {
                            // the range must fall at most between hex codes "00" and "FF"
                            System.out.print("\nEnter the new DEX stat (integer):\n >> ");
                            inputStat = Functions.checkIntRange(0, 255);

                            // replacing dexterity stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 2,
                                    Integer.toHexString(inputStat));
                        }
                        case 4 -> {
                            // the range must fall at most between hex codes "00" and "FF"
                            System.out.print("\nEnter the new MAG stat (integer):\n >> ");
                            inputStat = Functions.checkIntRange(0, 255);

                            // replacing magic stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 3,
                                    Integer.toHexString(inputStat));
                        }
                        case 5 -> {
                            // the range must fall at most between hex codes "0000" and "FFFF"
                            System.out.print("\nEnter the new HP stat (integer):\n >> ");
                            inputStat = Functions.checkIntRange(0, 65535);

                            // convert the hex value to little endian
                            convertedHex = Functions.toLittleEndian(Functions.paddedToHex(inputStat, 4));

                            // replacing first offset of health points stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 4,
                                    convertedHex.substring(0, 2));
                            // replacing second offset of health points stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 5,
                                    convertedHex.substring(2, 4));
                        }
                        case 6 -> {
                            // the range must fall at most between hex codes "0000" and "FFFF"
                            System.out.print("\nEnter the new HPMAX stat (integer):\n >> ");
                            inputStat = Functions.checkIntRange(0, 65535);

                            // convert the hex value to little endian
                            convertedHex = Functions.toLittleEndian(Functions.paddedToHex(inputStat, 4));

                            // replacing first offset of max health points stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 6,
                                    convertedHex.substring(0, 2));
                            // replacing second offset of max health points stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 7,
                                    convertedHex.substring(2, 4));
                        }
                        case 7 -> {
                            // the range must fall at most between hex codes "0000" and "FFFF"
                            System.out.print("\nEnter the new EXP stat (integer):\n >> ");
                            inputStat = Functions.checkIntRange(0, 65535);

                            // convert the hex value to little endian
                            convertedHex = Functions.toLittleEndian(Functions.paddedToHex(inputStat, 4));

                            // replacing first offset of experience stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 8,
                                    convertedHex.substring(0, 2));
                            // replacing second offset of experience stat based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 9,
                                    convertedHex.substring(2, 4));
                        }
                        case 8 -> {
                            // the range must fall at most between hex codes "00" and "FF"
                            System.out.print("\nEnter the new LVL stat (integer):\n >> ");
                            inputStat = Functions.checkIntRange(0, 255);

                            // replacing level based on offset of the current character
                            Functions.replaceByteAtOffset(saveFile,
                                    gameData.CHARACTER_STATS.offset + (32 * (inputCharNumber - 1)) + 10,
                                    Integer.toHexString(inputStat));
                        }
                    }

                } while (inputChoice != 0);
            }

        } while (inputCharNumber != 0);
    }
}